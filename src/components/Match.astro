---
export interface MatchProps {
    start: string
    result: string //jul: enum
    team1: string[]
    team2: string[]
}
const { result, team1, team2 } = Astro.props as MatchProps;

const teamOneOrder = [];

for (const [index, name] of team1.entries()) {
    teamOneOrder.push({ order: index + 1, name: name });
}
const teamTwoOrder = [];

for (const [index, name] of team2.entries()) {
    teamTwoOrder.push({ order: index + 1, name: name });
}

const maxPlayers = Math.max(team1.length, team2.length);
---

<div class='match'>
    <div class="team-1-won">{result == "1" ? "🏆" : ""}</div>
    <div class="draw">{result == "N" ? "🟰" : ""}</div>
    <div class="team-2-won">{result == "2" ? "🏆" : ""}</div>
    {teamOneOrder.map(player => (<p class={`team-1`} style={`order: ${player.order}`}>{player.name}</p>))}
    <p class="vs" style={`grid-row-end: ${maxPlayers+2}`}>VS</p>
    {teamTwoOrder.map(player => (<p class={`team-2`} style={`order: ${player.order}`}>{player.name}</p>))}
</div>

<style>
    .match {
        display: grid;
        border: 1px solid black;
        grid-template-columns: 1fr auto 1fr;
        border-radius: 0.5rem;
    }

    .team-1-won {
        grid-column-start: 1;
        grid-column-end: 2;
        text-align: center;
    }

    .draw {
        grid-column-start: 2;
        grid-column-end: 3;
        text-align: center;
    }

    .team-2-won {
        grid-column-start: 3;
        grid-column-end: 4;
        text-align: center;
    }

    .team-1 {
        grid-column-start: 1;
        grid-column-end: 2;
    }

    .vs {
        grid-column-start: 2;
        grid-column-end: 3;
        grid-row-start: 2;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .team-2 {
        grid-column-start: 3;
        grid-column-end: 4;
    }
</style>
